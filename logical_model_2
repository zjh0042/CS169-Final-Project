
```{r}

library(htmlTable)
library(tidyverse)
library(ggplot2)
library(rvest)
library(naniar)


```




setwd("/Users/jiataizhang/Desktop")
vac_data <- read.csv("COVID-19_Vaccinations_by_Race_Ethnicity_and_Age_-_ARCHIVED.csv", header=TRUE)
head(vac_data )
summary(vac_data)
str(vac_data)

```{r}
setwd("/Users/jiataizhang/Desktop")
vac_data <- read.csv("COVID-19_Vaccinations_by_Race_Ethnicity_and_Age_-_ARCHIVED.csv", header=TRUE)
head(vac_data )
summary(vac_data)
str(vac_data)

# Create a subset where Vaccination.status is either "Additional 1" or "Initiated"
df <- vac_data[vac_data$Vaccination.status %in% c("Additional 1", "Initiated"), ]

# Optionally, if you want to convert "Additional 1" to 1 and "Initiated" to 0

# Now df contains the subset of rows where Vaccination.status is 1 or 0
df <- vac_data[vac_data$Race.ethnicity != "NH Other Race" & vac_data$Race.ethnicity != "Unknown", ]
df$Vaccination.status <- as.numeric(df$Vaccination.status == "Additional 1")

head(df)
```
```{r}

logistic <- glm(Vaccination.status~Race.ethnicity, data = df, family = "binomial")
summary(logistic)
```


# NOw we will use all the variables for this model

# Lets us first split data into train and test data : 

# with the help of library caTools 
Splitting data into training and testing sets is a crucial step in evaluating model performance in machine learning. This division allows us to train the model on one subset and then assess its ability to generalize to unseen data in an independent test set. It helps prevent overfitting to the training data, aids in model selection, and provides an objective evaluation of how well the model performs on real-world data. Typically, a common split ratio is 80% for training and 20% for testing.


```{r}

library(caTools)
split = sample.split(df$Vaccination.status, SplitRatio = 0.8)

train_data = subset(df, split == TRUE )
test_data = subset(df, split == FALSE )

nrow(train_data)
nrow(test_data)

```



```{r}

logisticnew <- glm(Vaccination.status~.,data = train_data, family = "binomial")

summary(logisticnew)

```
# From the above stats we can see that variables :Race.ethnicity,Count,Percent.population,Population are factors which play important role in the model 

# Hence we can use only these variables and remove other : 

# Now our model formulae will be : 



```{r}


logistic_m <- glm(Vaccination.status~ Race.ethnicity+Count+Percent.population+Population, family = "binomial", data = train_data)


summary(logistic_m)



```

```{r}

p1 <- predict(logistic_m, train_data, type = "response")
pred1 <- ifelse(p1>0.5, 1,0)

pred1_matrix <- table(pred = pred1, Actual = train_data$Vaccination.status)
print(pred1_matrix)


accuracy_1 <- sum(diag(pred1_matrix)) / sum(pred1_matrix)
accuracy_1
```



```{r}
p2 <- predict(logistic_m, test_data, type = "response")
pred2 <- ifelse(p2>0.5, 1,0)
pred2_matrix <- table(pred = pred2, Actual = test_data$Vaccination.status)
print(pred2_matrix)


accuracy_2 <- sum(diag(pred2_matrix)) / sum(pred2_matrix)
accuracy_2
```




```{r}

library(tinytex)
with(logistic_m, pchisq(null.deviance-deviance, df.null-df.residual, lower.tail = F))


ll.null <- logistic$null.deviance/-2

ll.proposed <- logisticnew$deviance/-2


```





# Calculating the pseudo R^2
```{r}
(ll.null - ll.proposed)/ll.null


```



# To calculate a p-value for that R^2 using a Chi-Square distribution 

```{r}
1-pchisq(2*(ll.proposed-ll.null), df = (length(logistic$coefficients)-1))

``



```{r}
predicted_probabilities <- predict(logistic_m,df, type = "response")

predicted.data <- data.frame(
  probability.of.hd = predicted_probabilities,
  hd = df$Vaccination.status,
  ph = df$Race.ethnicity
)
head(predicted.data) 
```




```{r}
predicted.data <- predicted.data[order(predicted.data$probability.of.hd,
                                       decreasing = FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)


head(predicted.data)

```











